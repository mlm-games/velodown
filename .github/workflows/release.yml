name: 'Manual Release'

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Release version (e.g., 0.2.0). This must be a new version.'
        required: true
      mark_prerelease:
        description: 'Mark as a pre-release?'
        required: true
        default: 'false'
        type: boolean
      publish_to_aur:
        description: 'Publish to AUR?'
        required: false
        default: 'true'
        type: boolean

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ inputs.version_name }}
      release_notes: ${{ steps.generate_notes.outputs.release-notes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        id: generate_notes
        uses: mlm-games/release-notes-generator@v1.1.0
        with:
          version: ${{ inputs.version_name }}
          changelog-path: 'CHANGELOG.md'
          auto-commit: 'false'
          exclude-patterns: 'chore(release),Merge pull request'

      - name: Update version files
        run: |
          echo "Bumping versions to ${{ inputs.version_name }}"
          # Update package.json
          npm version ${{ inputs.version_name }} --no-git-tag-version
          # Update tauri.conf.json using jq
          jq --arg new_version "${{ inputs.version_name }}" '.version = $new_version' src-tauri/tauri.conf.json > tmp.json && mv tmp.json src-tauri/tauri.conf.json
          # Update Cargo.toml version
          # sed -i "s/^version = .*/version = \"${{ inputs.version_name }}\"/" src-tauri/Cargo.toml
          
      - name: Commit and push version changes
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "chore(release): Bump version to ${{ inputs.version_name }}"
          git push
        
  build_tauri:
    needs: prepare_release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          
      - name: Install frontend dependencies
        run: npm install

      - name: Build the frontend
        run: npm run build

      - name: Build and Release with Tauri Action
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: 'v${{ inputs.version_name }}'
          releaseName: 'VeloDown v${{ inputs.version_name }}'
          releaseBody: |
            ${{ needs.prepare_release.outputs.release_notes }}
            
            ---
            Download the installer for your OS below.
          releaseDraft: false
          prerelease: ${{ inputs.mark_prerelease }}

  deploy:
    needs: build_tauri
    runs-on: ubuntu-latest
    if: ${{ inputs.publish_to_aur == true && inputs.mark_prerelease == false }}
    steps:
      - name: Wait for release assets
        run: sleep 30  # Give time for assets to be uploaded
        
      - name: Trigger AUR Publish
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'aur-publish.yml', 
              ref: 'main',
              inputs: {
                version_name: '${{ inputs.version_name }}',
                increment_pkgrel: 'false'
              }
            });
